/**
 * Lethean Binary API
 * Functionality to simplify using LTHN
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: contact@lethean.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef lthnSDP_lthnSDPVpnApi_H
#define lthnSDP_lthnSDPVpnApi_H

#include "lthnSDPHelpers.h"
#include "lthnSDPHttpRequest.h"
#include "lthnSDPServerConfiguration.h"
#include "lthnSDPOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace lthn {
namespace sdp {
namespace api {

class lthnSDPVpnApi : public QObject {
    Q_OBJECT

public:
    lthnSDPVpnApi(const int timeOut = 0);
    ~lthnSDPVpnApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, lthnSDPServerVariable> &variables = QMap<QString, lthnSDPServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, lthnSDPServerVariable> &variables =  QMap<QString, lthnSDPServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, lthnSDPServerVariable> &variables =  QMap<QString, lthnSDPServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  data_dir QString [required]
    * @param[in]  version bool [optional]
    */
    void startLetheand(const QString &data_dir, const ::lthn::sdp::api::OptionalParam<bool> &version = ::lthn::sdp::api::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<lthnSDPServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    lthnSDPHttpRequestInput _latestInput;
    lthnSDPHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void startLetheandCallback(lthnSDPHttpRequestWorker *worker);

signals:

    void startLetheandSignal();

    void startLetheandSignalFull(lthnSDPHttpRequestWorker *worker);

    void startLetheandSignalE(QNetworkReply::NetworkError error_type, QString error_str);

    void startLetheandSignalEFull(lthnSDPHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace lthn
} // namespace sdp
} // namespace api
#endif
